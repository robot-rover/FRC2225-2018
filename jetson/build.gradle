import java.util.logging.Level

apply plugin: 'jaci.gradle.EmbeddedTools'
apply plugin: 'java'

// Methods to determine the operating system (OS) and architecture (Arch) of the system.
// These strings are used to determine the classifier of the artifact that contains the
// native libaries. For example, when the operating system is "windows" and the
// architecture is "x86_64", then the classifier will be "windows-x86_64", and thus,
// the JAR file containing the native libraries will be
// jcuda-natives-windows-x86_64-0.8.0.jar
// These methods are taken from
// https://github.com/jcuda/jcuda/blob/master/JCudaJava/src/main/java/jcuda/LibUtils.java
def static getOsString() {
    String vendor = System.getProperty("java.vendor");
    if ("The Android Project" == vendor) {
        return "android";
    } else {
        String osName = System.getProperty("os.name");
        osName = osName.toLowerCase(Locale.ENGLISH);
        if (osName.startsWith("windows")) {
            return "windows";
        } else if (osName.startsWith("mac os")) {
            return "apple";
        } else if (osName.startsWith("linux")) {
            return "linux";
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch");
    osArch = osArch.toLowerCase(Locale.ENGLISH);
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86";
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64";
    } else if (osArch.startsWith("arm64")) {
        return "arm64";
    } else if (osArch.startsWith("arm")) {
        return "arm";
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc";
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64";
    } else if (osArch.startsWith("sparc")) {
        return "sparc";
    } else if (osArch.startsWith("mips64")) {
        return "mips64";
    } else if (osArch.startsWith("mips")) {
        return "mips";
    } else if (osArch.contains("risc")) {
        return "risc";
    }
    return "unknown";
}



deploy {
    targets {
        target("jetson") {
            addresses << '10.42.0.186' //todo: Set jetson properties
            user = 'nvidia'
            password = 'nvidia'
            directory = '/home/nvidia/'       // Note: must be an absolute path
            failOnMissing = true   // Just in case our coprocessor is missing. Optional.
        }
    }
    artifacts {
        // Define my artifact. In this case, the default java build for this project.
        javaArtifact('jetsonCode') {
            targets << "jetson"
            jar = 'jar'     // This sets the jarfile to deploy. The default jar task in gradle is simply called 'jar'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'org.boofcv', name: 'boofcv-core', version: '0.27'
    compile ('org.jcuda:jcuda:0.8.0') {
        exclude module: 'jcuda-natives'
        transitive = false
    }
    //compile group: 'edu.wpi.first.cscore', name: 'cscore-java', version: '1.424242.1.0-20180202174959-dirty'
    testCompile group: 'org.boofcv', name: 'boofcv-swing', version: '0.27'
    compile 'org.bytedeco:javacv:1.4'
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    // I need to set my manifest up so the coprocessor knows where my main class is
    manifest {
        attributes 'Main-Class': 'org.usfirst.frc.team2225.season2018.jetson.CoprocessorExample'
    }
}
